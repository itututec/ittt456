# 新版OpenClash 通用链式代理配置模板
# 场景：机场订阅/节点 + 住宅 SOCKS5 链式代理，防止 DNS/WebRTC 泄漏
# 提示：请务必替换【必改】部分为你自己的真实信息

# ──────────────── 全局基础设置 ────────────────
port: 7890                        # HTTP 代理端口，默认 7890
socks-port: 7891                  # SOCKS5 代理端口，默认 7891
allow-lan: true                   # 是否允许局域网设备连接
mode: rule                        # 使用规则模式分流
log-level: info                   # 日志级别
external-controller: :9090        # 外部控制面板端口

# ──────────────── DNS 设置（防 DNS 泄漏） ────────────────
dns:
  enable: true
  ipv6: false
  listen: 0.0.0.0:53
  enhanced-mode: fake-ip
  fake-ip-filter:
    - '*.lan'
    - localhost.ptlogin2.qq.com
    - '*.msftconnecttest.com'
    - '*.msftncsi.com'
    - 'stun.*.*'
    - '*.stun.*'
  default-nameserver:
    - 119.29.29.29
    - 223.5.5.5
    - 114.114.114.114
  nameserver:
    - https://dns.cloudflare.com/dns-query
    - https://dns.google/dns-query
  nameserver-policy:
    "geosite:cn":
      - 119.29.29.29
      - 223.5.5.5
      - 114.114.114.114
  fallback:
    - https://doh.dns.sb/dns-query
    - https://dns.cloudflare.com/dns-query
    - https://dns.google/dns-query
  fallback-filter:
    geoip: true
    geoip-code: CN
    geosite: [gfw]
    ipcidr: [240.0.0.0/4]
    domain:
      - "+.google.com"
      - "+.facebook.com"
      - "+.youtube.com"
      - "+.x.com"
      - "+.openai.com"
      - "+.tiktok.com"
      - "+.icloud.com"
      - "+.apple.com"
      - "+.cloudflare.com"
      - "+.amazonaws.com"
      - "+.doubleclick.net"
      - "+.ghproxy.com"

# ──────────────── 机场订阅节点 ────────────────
proxy-providers:     # 可作为链式中继节点
  69yun:    # 机场名称，需自定义修改
    url: "https://uncheckhere.live/link/#dnodohR4PosdBCG5BY%nd?clash=1"     # 机场订阅链接
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: DIRECT
    #override:
      #dialer-proxy: 🇭🇰 香港节点     # 中继节点或节点组
    #payload:     #以下是落地节点——一般是购买的专用的SOCKS5节点
      #- {"name":"香港落地1", "type":"ss","server":"23.175.201.164","port":80,"cipher":"2022-blake3-aes-128-gcm","password":"UETm2mAIRiCaVJuIe1t0cA==","udp":true}
      #- { name: "香港落地2", type: "ss" }

# ──────────────── 节点配置 ────────────────
proxies:
  # === 机场节点——可作为链式中继节点（【必改】替换为真实信息）===
  #- {name: bpb01, server: 1.2.3.4, port: 443, type: trojan, password: pass123, sni: example.com, skip-cert-verify: false, network: ws, ws-opts: {path: /demo_path, headers: {Host: example.com}}}
  #- {name: bpb02, server: 2.3.4.5, port: 443, type: trojan, password: pass456, sni: example.org, skip-cert-verify: false, network: ws, ws-opts: {path: /demo_path2, headers: {Host: example.org}}}
  # - {name: bpb03, server: , port: 443, type: trojan, password: , sni: , skip-cert-verify: false, network: ws, ws-opts: {path: , headers: {Host: }}}   # 【可选】更多节点
  - {"type":"hysteria2","name":"hy2-racknerd-US","server":"rnvvv.inf5688.eu.org","port":57000,"ports":"57000,57001-57005","password":"88be0ced-5280-4034-9a9e-5eae0b0c4743","sni":"rnvvv.inf5688.eu.org","skip-cert-verify":false,"tfo":false}

  # === 落地节点-住宅 SOCKS5 节点（一般需要单独购买SOCKS5节点，链式出口节点，需配合 dialer-proxy）===
  - name: 链代US01-SK5-Free
    type: socks5
    server: 192.252.215.5            # 【必改】SOCKS5 代理地址
    port: 16137                # 【必改】端口号
    username:           # 【必改】用户名
    password:           # 【必改】密码
    udp: true
    dialer-proxy: 住宅A-华东中继组   # 指定前置中继节点或节点组

  # - name: 链式代理-住宅A   # 【默认禁用】启用请去掉#
  #   type: socks5
  #   server: 5.6.7.8          # 【必改】住宅A 地址
  #   port: 11000              # 【必改】端口号
  #   username: user456        # 【必改】用户名
  #   password: pass456        # 【必改】密码
  #   udp: true
  #   dialer-proxy: 住宅A-华东中继组   # 指定前置中继节点或节点组

  # - name: 链式代理-住宅B   # 【默认禁用】启用请去掉#
  #   type: socks5
  #   server: 6.7.8.9          # 【必改】住宅B 地址
  #   port: 11000              # 【必改】端口号
  #   username: user456        # 【必改】用户名
  #   password: pass456        # 【必改】密码
  #   udp: true
  #   dialer-proxy: 住宅B-华南中继组   # 指定前置中继节点或节点组

# ──────────────── 策略组 ────────────────
proxy-groups:
# ──────────────── 需提前在配置文件中设定具体的中继节点：使用中灵活性略低 ────────────────
  # 中继组：提前设定好中继节点（机场节点 → 住宅出口链式）
  #- name: SK5-中继组1
  #  type: select
  #  proxies:     # 上述已经定义好的节点名称
  #    - bpb01
  #    - bpb02

  # - name: 住宅A-华东中继组
  #   type: select
  #   proxies:     # 上述已经定义好的节点名称
  #     - bpb01
  #     - bpb02

  # - name: 住宅B-华南中继组
  #   type: select
  #   proxies:     # 上述已经定义好的节点名称
  #     - bpb01
  #     - bpb02

  #- name: 节点选择
  #  type: select
  #  proxies:     # 上述已经定义好的节点名称
      # - 链式代理-住宅A     #落地节点名称，如果国内无法连接或网速不好，不建议放在该组
      # - 链式代理-住宅B     #落地节点名称，如果国内无法连接或网速不好，不建议放在该组
  #    - bpb01
  #    - bpb02
  #    - DIRECT
  
# ──────────────── 只需提前设定 含多个中继节点的分类节点组 即可，不用设定具体的中继节点：使用中灵活高，推荐 ────────────────
  - {name: 住宅A-华东中继组, type: select, proxies: [♻️ 日本自动, ♻️ 台湾自动]}
  - {name: 住宅B-华南中继组, type: select, proxies: [♻️ 香港自动, ♻️ 狮城自动]}

# 通用按地区分类节点组
  - {name: 🌐 全部节点, type: select, include-all: true, filter: "^((?!(SK5|SOCKS5)).)*$"}
  - {name: 🚀 默认代理, type: select, proxies: [♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连|SK5|SOCKS5)).)*$"}
  - {name: 🌞 落地节点, type: select, include-all: true, filter: "(?i)SOCKS5|SK5|链式代理"}  
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|HK|hongkong|hong kong"}
  - {name: 🇹🇼 台湾节点, type: select, include-all: true, filter: "(?i)台|Taiwan|TW|🇹🇼"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?=.*(日|JP|(?i)Japan))^((?!(尼日利亚|尼日)).)*$" }
  - {name: 🇸🇬 狮城节点, type: select, include-all: true, filter: "(?i)新加坡|坡|狮城|SG|Singapore"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|US|unitedstates|united states"}
  - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong|Hongkong|HK))^((?!(台|日|韩|新|美|SK5|SOCKS5)).)*$"}
  - {name: ♻️ 台湾自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(台|TW|(?i)Taiwan|TW))^((?!(港|日|韩|新|美|SK5|SOCKS5)).)*$"}
  - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(尼日利亚|港|台|韩|新|美|SK5|SOCKS5)).)*$" }
  - {name: ♻️ 狮城自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(港|台|韩|日|美|SK5|SOCKS5)).)*$" }
  - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新|SK5|SOCKS5)).)*$"}

  - {name: 📹 YouTube, type: select, proxies: [♻️ 美国自动, ♻️ 台湾自动, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: 🍀 Google, type: select, proxies: [♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: 🤖 ChatGPT, type: select, proxies: [♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: 🐬 OneDrive, type: select, proxies: [♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: 🪟 Microsoft, type: select, proxies: [♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: 🎵 TikTok, type: select, proxies: [♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: 📲 Telegram, type: select, proxies: [♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: 🎥 NETFLIX, type: select, proxies: [♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: 💶 PayPal, type: select, proxies: [♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [🚀 默认代理, ♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点]}

# ──────────────── 分流规则 ────────────────
rules:
  # 1) 防 WebRTC 泄漏（拦截 STUN）——如设置后经常出现问题，可注释掉不启用
  - DOMAIN-SUFFIX,stun.l.google.com,REJECT
  - DOMAIN-KEYWORD,stun,REJECT
  - DOMAIN-KEYWORD,turn,REJECT
  - DOMAIN-KEYWORD,rtc,REJECT

  # 2) 链式代理分流：一机一住宅IP（配合 DHCP 静态分配固定IP 使用）
  # - SRC-IP-CIDR,192.168.20.101/32,链式代理-住宅A  #匹配数据发起IP(走落地SK5节点:链式代理-住宅A)：发起IP需查阅设备实际分配的IP进行修改
  # - SRC-IP-CIDR,192.168.20.102/32,链式代理-住宅B  #匹配数据发起IP(走落地SK5节点:链式代理-住宅B)：发起IP需查阅设备实际分配的IP进行修改

  # 3) 本地直连
  - RULE-SET,private_domain,DIRECT
  - RULE-SET,private_ip,DIRECT
  - IP-CIDR,127.0.0.0/8,DIRECT  #匹配数据目标IP(直连)

  # 4) 常见跨境平台强制走代理
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,apple_domain,DIRECT
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,apple_ip,DIRECT,no-resolve
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,geolocation-!cn,🚀 默认代理
 
   # 5) 国内直连
  - GEOIP,CN,DIRECT
  - RULE-SET,cn_domain,DIRECT
  - RULE-SET,cn_ip,DIRECT
  
    # 5) 其他流量默认走代理
  - MATCH,🐟 漏网之鱼

# 规则集
## type：可选http/file/inline  behavior：可选domain/ipcidr/classical format：可选yaml/text/mrs
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  ai: {  <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"} 
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  apple_ip: {<<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo-lite/geoip/apple.mrs"}
  private_ip: {<<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.mrs"}
